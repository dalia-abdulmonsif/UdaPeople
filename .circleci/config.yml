version: 2.1   
orbs:
  slack: circleci/slack@4.10.1
commands:

    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID}  
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
               aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
               aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
               aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
 
    revert-migrations:
       description: Revert the last migration if successfully run in the current workflow.
       parameters:
         Workflow_ID:
            type: string  
            default: ${CIRCLE_WORKFLOW_ID}  
       steps:
         - run:
            name: Revert migrations
            when: on_fail
            command: |
               SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID})
               if(( $SUCCESS==1 ))
               then
                cd ~/project/backend
                npm install
                npm run migration:revert
               fi
 
 
    awscli_install :
       description: Install AWS CLI V2
       steps:
        - run :
           name : Install aws cli v2 
           command: |
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install

    ansible_install :
       description: Install Ansible
       steps:
        - run :
           name : Install ansible 
           command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible
         
    notify_on_failure :
        steps:
          - slack/notify:
               event: fail
               channel: cicd-pipelines
               template: basic_fail_1     

jobs:
    build-frontend:
        docker:
          - image: cimg/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [frontend-deps]
          - run:
              name: Front-end build          
              command: | 
                cd frontend
                npm install 
                npm run build
          - save_cache:
              paths: [frontend/node_modules]
              key: frontend-deps
          - notify_on_failure

    build-backend:
        docker:
          - image: cimg/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [backend-deps]
          - run:
              name: Back-end build   
              command: | 
                cd backend
                npm install 
                npm run build
          - save_cache:
              paths: [backend/node_modules]
              key: backend-deps
          - notify_on_failure
          
    test-frontend:
        docker:
          - image: cimg/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [frontend-deps]
          - run:
              name: Front-end build         
              command: | 
                cd frontend
                npm install 
                npm test          
          - notify_on_failure
                
    test-backend:
      docker:
        - image: cimg/node:13.8.0
      steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build         
          command: | 
           cd backend
           npm install 
           npm test
      - notify_on_failure
   
    scan-frontend:
      docker:
       - image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
             keys: [frontend-deps]
        - run:
             name: Front-end build         
             command: | 
                 cd frontend
                 npm install 
                 npm audit fix --force --audit-level=critical
                 npm audit --audit-level=critical         
        - notify_on_failure

    scan-backend:
        docker:
            - image: cimg/node:13.8.0
        steps:
          - checkout
          - restore_cache:
              keys: [backend-deps]
          - run:
              name: Back-end build         
              command: | 
                  cd backend
                  npm install 
                  npm audit fix --force --audit-level=critical
                  npm audit fix --force --audit-level=critical
                  npm audit --audit-level=critical
          - notify_on_failure


    deploy-infrastructure:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - awscli_install
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --tags project=your-tag \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                --output text --query 'Reservations[*].Instances[*].PublicIpAddress')
                echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - destroy-environment


    configure-infrastructure:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout 
        - ansible_install
        - add_ssh_keys:
             fingerprints: 'cf:d2:7b:a8:ef:e4:77:6d:ab:38:ef:f2:5d:33:72:6e'
        - attach_workspace:
             at: ~/
        - run: 
            name: Configure Server
            command: |
               cd .circleci/ansible
               cat inventory.txt
               ansible-playbook -i inventory.txt configure-server.yml                         
        - destroy-environment


    run-migrations:
        docker:
          - image: cimg/node:13.8.0
        steps:
          - checkout
          - awscli_install
          - run:
              name: Run migrations
              command: |
                cd backend
                node -v 
                sudo npm install typescript@latest -g
                tsc --init
                tsc --version
                npm install
                npm audit fix --force
                npm run migrations > migrations_dump.txt
          - run:
              name: Send migration results to kvdb.io
              command: |
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                  curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID} -d '1'
                fi
          - destroy-environment
          - revert-migrations    

 #KL48reMyYUBPYTrg4gYseg

    deploy-frontend:
        docker:
          - image: cimg/node:13.8.0
        steps:
          - checkout
          - awscli_install
          - restore_cache:
              keys: [frontend-deps]
          - run:
              name: Install dependencies
              command: |
                cd frontend
                npm install 
          - run:
              name: Get backend
              command: |
                  BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                  --output text --query 'Reservations[*].Instances[*].PublicIpAddress')
                  export API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                  cat frontend/.env
          - run:
              name: Deploy frontend objects
              command: |
                cd frontend
                npm run build
                aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
    
          - destroy-environment
          - revert-migrations                 


    deploy-backend:
        docker:
           - image: cimg/base:stable
        steps:
          - checkout
          - awscli_install
          - add_ssh_keys:
                fingerprints: "cf:d2:7b:a8:ef:e4:77:6d:ab:38:ef:f2:5d:33:72:6e"
          - attach_workspace:
                 at: ~/
          - restore_cache:
              keys: [backend-deps]       
          - run:
              name: Install dependencies
              command: |
                  cd backend
                  npm install 
          - run:
              name: Package backend
              command: |
                cd backend
                npm run build
                tar -czf artifact.tar.gz dist/* package*
                cd ..
                cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
          - run:
              name: Deploy backend
              command: |
                export TYPEORM_MIGRATIONS_DIR=./migrations
                export TYPEORM_ENTITIES=./modules/domain/**/*.entity(.ts,.js)
                export TYPEORM_MIGRATIONS=./migrations/*.ts
                cd .circleci/ansible
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml
          - destroy-environment
          - revert-migrations   
   
    smoke-test-backend:
        docker:
          - image: cimg/base:stable
        steps:
          - checkout
          - attach_workspace:
              at: ~/
          - run:
              name: Install dependencies
              command: |
                  apk add --update curl
                  pip install awscli
          - run:
              name: Backend smoke test
              command: |
                  BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                  API_URL="http://${BACKEND_IP}:3030"
                  curl "${API_URL}/api/status"



    smoke-test-frontend:
        docker:
          - image: cimg/base:stable
        steps:
          - checkout
          - attach_workspace:
              at: ~/
          - run:
              name: Install dependencies
              command: |
                apk add --update curl
                pip install awscli
          - run:
              name: Smoke test for front end
              command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"             
                echo ${URL} 
                if curl -s ${URL} | grep "Welcome"
                then
                  exit 0
                else
                  exit 1
                fi           

    notify_on_success:
        docker:
         - image: 'cimg/base:stable'
        steps:
         - slack/notify:
            event: pass
            channel: cicd-pipelines
            template: success_tagged_deployment_1
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]         
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]   
      - configure-infrastructure:
          requires: [deploy-infrastructure]    
      - run-migrations:
          requires: [configure-infrastructure]    
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]   
      - smoke-test-backend:
          requires: [deploy-backend]
      - smoke-test-frontend:
          requires: [deploy-frontend]      
      - notify_on_success:
          requires:
            - build-frontend
            - build-backend
            - test-frontend
            - test-backend     
            - deploy-infrastructure  
            - configure-infrastructure             
            - run-migrations
            - deploy-backend
            - deploy-frontend

