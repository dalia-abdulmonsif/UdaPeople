version: 2.1   
orbs:
  slack: circleci/slack@4.10.1
commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  awscli_install :
   description: Install AWS CLI V2
   steps:
    - run :
       name : Install aws cli v2 
       command: |
         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
         unzip awscliv2.zip
         sudo ./aws/install

  ansible_install :
   description: Install Ansible
   steps:
    - run :
       name : Install ansible 
       command: |
          sudo apt update
          sudo apt install software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible
         
  notify_on_failure :
    steps:
      - slack/notify:
           event: fail
           channel: cicd-pipelines
           template: basic_fail_1     

         
jobs:

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end build          
          command: | 
             cd frontend
             npm install 
             npm run build
      - save_cache:
           paths: [frontend/node_modules]
           key: frontend-deps
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          
          command: | 
           cd backend
           npm install 
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - notify_on_failure
          
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end build         
          command: | 
           cd frontend
           npm install 
           npm test          
      - notify_on_failure
                
  test-backend:
      docker:
        - image: cimg/node:13.8.0
      steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build         
          command: | 
           cd backend
           npm install 
           npm test
      - notify_on_failure
   
  scan-frontend:
      docker:
       - image: cimg/node:13.8.0
      steps:
       - checkout
       - restore_cache:
          keys: [frontend-deps]
       - run:
          name: Front-end build         
          command: | 
           cd frontend
           npm install 
           npm audit fix --force --audit-level=critical
           npm audit --audit-level=critical
           
       - notify_on_failure

  scan-backend:
    docker:
        - image: cimg/node:13.8.0
    steps:
       - checkout
       - restore_cache:
          keys: [backend-deps]
       - run:
          name: Back-end build         
          command: | 
           cd backend
           npm install 
           npm audit fix --force --audit-level=critical
           npm audit fix --force --audit-level=critical
           npm audit --audit-level=critical
       - notify_on_failure


  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - awscli_install
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text --query "Reservations[*].Instances[*].PublicIpAddress")
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt


      - destroy-environment
      
      # Here's where you will add some code to rollback on failure      

  notify_on_success:
    docker:
     - image: 'cimg/base:stable'
    steps:
     - slack/notify:
        event: pass
        channel: cicd-pipelines
        template: success_tagged_deployment_1
       
       
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]         
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]    
      - notify_on_success:
          requires:
            - build-frontend
            - build-backend
            - test-frontend
            - test-backend     
            - deploy-infrastructure               
  
      
      
      

